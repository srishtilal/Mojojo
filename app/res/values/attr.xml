<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!-- customized textview attrs-->
    <declare-styleable name="TextView">
        <attr name="typeface" format="string"/>
    </declare-styleable>

    <declare-styleable name="MaterialEditText">
        <!-- the base color of the line and the texts. default is black. -->
        <attr name="baseColor" format="color" />
        <!-- the highlight color of the line, and the floating label if the highlightFloatingLabel is true. -->
        <attr name="primaryColor" format="color" />
        <!-- how the floating label should be shown. default is none -->
        <attr name="floatingLabel">
            <enum name="none" value="0" />
            <enum name="normal" value="1" />
            <enum name="highlight" value="2" />
        </attr>
        <!-- the color for when something is wrong.(e.g. exceeding max characters) -->
        <attr name="errorColor" format="color" />
        <!-- the base color for error.(e.g. exceeding max characters) -->
        <attr name="BaseErrorColor" format="color" />
        <!-- characters count limit. 0 means no limit. -->
        <attr name="maxCharacters" format="integer" />
        <!-- whether to show the bottom ellipsis in singleLine mode -->
        <attr name="singleLineEllipsis" format="boolean" />
        <!--if the text has the be checked against a regular expression -->
        <attr name="regexExpression" format="string" />
        <!-- error text to show the user if input is not valid -->
        <attr name="regexErrorText" format="string" />
        <!-- text to show the user if input is valid -->
        <attr name="regexText" format="string" />
    </declare-styleable>

    <!-- Floating Action Button Attrs -->

    <declare-styleable name="FloatingActionButton">
        <attr name="fab_colorPressed" format="color" />
        <attr name="fab_colorNormal" format="color" />
        <attr name="fab_icon" format="reference" />
        <attr name="fab_size" format="enum">
            <enum name="normal" value="0" />
            <enum name="mini" value="1" />
        </attr>
        <attr name="fab_title" format="string" />
        <attr name="fab_stroke_visible" format="boolean" />
    </declare-styleable>
    <declare-styleable name="AddFloatingActionButton">
        <attr name="fab_plusIconColor" format="color" />
    </declare-styleable>
    <declare-styleable name="FloatingActionsMenu">
        <attr name="fab_addButtonColorPressed" format="color" />
        <attr name="fab_addButtonColorNormal" format="color" />
        <attr name="fab_addButtonPlusIconColor" format="color" />
        <attr name="fab_addButtonStrokeVisible" format="boolean" />
        <attr name="fab_labelStyle" format="reference" />
        <attr name="fab_expandDirection" format="enum">
            <enum name="up" value="0" />
            <enum name="down" value="1" />
            <enum name="left" value="2" />
            <enum name="right" value="3" />
        </attr>
    </declare-styleable>


    <!-- CircularImageView for custom shape -->
    <declare-styleable name="CircularImageView">

        <!-- Specifies whether or not to draw a circular border around the image. -->
        <attr name="civ_border" format="boolean"/>
        <!-- Specifies the color of the border draw around the image. (if enabled) -->
        <attr name="civ_border_color" format="color"/>
        <!-- Makes the border this pixels wide. (if enabled) -->
        <attr name="civ_border_width" format="dimension"/>
        <!-- Specifies whether or not to draw a selector on this view upon touch events. -->
        <attr name="civ_selector" format="boolean"/>
        <!-- Specifies the color of the selector draw on top of the image upon touch events. (if enabled) -->
        <attr name="civ_selector_color" format="color"/>
        <!-- Specifies the color of the selector stroke drawn around the image upon touch events. Be sure to provide some opacity. (if enabled) -->
        <attr name="civ_selector_stroke_color" format="color"/>
        <!-- Makes the selector stroke drawn around the image upon touch events this pixels wide. (if enabled) -->
        <attr name="civ_selector_stroke_width" format="dimension"/>
        <!-- Specifies whether or not to draw a shadow around your circular image. -->
        <attr name="civ_shadow" format="boolean"/>
    </declare-styleable>

    <declare-styleable name="CircularImageViewStyle">
        <attr name="circularImageViewDefault" format="reference" />
    </declare-styleable>

</resources>
